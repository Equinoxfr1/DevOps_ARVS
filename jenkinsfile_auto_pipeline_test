pipeline {
    agent any
    stages {
        stage('Retrieve Issues') {
            steps {
                script {
                    def issues = getGitHubIssues()
                    issues.each { issue ->
                        def stageName = "Issue-${issue.number}: ${issue.title}"
                        echo "Adding stage: ${stageName}"
                        createDynamicStage(stageName, issue)
                    }
                }
            }
        }
    }
}

def getGitHubIssues() {
    def url = "https://api.github.com/repos/Equinoxfr1/DevOps_ARVS/issues"

def response = powershell(script: "Invoke-WebRequest -Uri 'https://api.github.com/repos/Equinoxfr1/DevOps_ARVS/issues' -UseBasicParsing | Select-Object -ExpandProperty Content", returnStdout: true).trim()
    return new groovy.json.JsonSlurper().parseText(response)
}

def createDynamicStage(name, issue) { 
    stage(name) {
        steps {
            script {
                echo "Processing issue #${issue.number}: ${issue.title}"
            }
        }
    }
}
